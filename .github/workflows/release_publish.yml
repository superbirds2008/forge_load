name: build_release_linux_binary 
on: 
  push:
    tags:
      # 监视版本号大于等于0.2的标签，第一位要大于等于零
      - 'v*.*.*'
env:
  USER_TOKEN: ${{ secrets.WEBEX_BOT_TOKEN }}
  webex_user_email: pengzhan@cisco.com
jobs:
  build_linux_binary:
    permissions: write-all
    strategy:
      matrix:
        os: [ubuntu-latest, debian-latest, centos-latest]
        arch: [x86, ARM64]
        exclude:
          - os: ubuntu-latest
            arch: ARM64
    runs-on: ${{ matrix.os }}
    continue-on-error: true    
    steps:

    - uses: actions/checkout@v3

    - name: Debug context and github objects
      uses: actions/github-script@v6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        script: |
          console.log(context);
          console.log(github);
    # - name: Get release note
    #   id: get_release_note
    #   run: |
    #     tag=${{ github.ref }}
    #     version=${tag#refs/tags/v}
    #     awk -v version="$version" '
    #       BEGIN { flag = 0 }
    #       /^### / {
    #         if (flag) exit
    #         if ($2 == version) flag = 1
    #       }
    #       flag' CHANGELOG.md > release_note.txt

    - name: Check if release exists
      id: check_release
      uses: actions/github-script@v6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        script: |
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          const release = releases.find(release => release.tag_name === context.ref.replace('refs/tags/', ''));
          
          if (release) {
            core.setOutput("release_id", release.id);
            core.setOutput("upload_url", release.upload_url);
            core.setOutput("html_url", release.html_url);
          } else {
            core.setOutput("release_id", "");
            core.setOutput("upload_url", "");
          }

    - name: Create Release
      if: steps.check_release.outputs.upload_url == '' 
      id: create_release
      # uses: actions/create-release@v1
      uses: actions/github-script@v6 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const releaseNote = fs.readFileSync('release_note.txt', 'utf8');
          const createRelease = async () => {
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: `Release ${context.ref.replace('refs/tags/', '')}`,
              body: releaseNote,
              draft: false,
              prerelease: false
            });
            core.setOutput("upload_url", release.upload_url);
            core.setOutput("html_url", release.html_url);
          };
          createRelease().catch(error => {
            core.setFailed(error.message);
          });

    - name: Use upload_url
      id: use_upload_url
      run: |
        if [[ "${{ steps.check_release.outputs.upload_url }}" == "" ]]; then
          echo "Using upload_url from create_release step"
          echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_ENV
          echo "html_url=${{ steps.create_release.outputs.html_url }}" >> $GITHUB_ENV
        else
          echo "Using upload_url from check_release step"
          echo "upload_url=${{ steps.check_release.outputs.upload_url }}" >> $GITHUB_ENV
          echo "html_url=${{ steps.check_release.outputs.html_url }}" >> $GITHUB_ENV
        fi

    - name: change current directory to ./build_env directory and build arm64 linux binary 
      run: |
        ./build.sh

    - name: Upload Release Asset first 
      id: upload-release-asset-first
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build/soss-monitor.bin
        asset_name: soss-monitor-${{ matrix.os }}-${{ matrix.arch }}.bin 
        asset_content_type: application/octet-stream
      
    - name: send webex bot notification with success result
      run: | 
        curl --request POST --header "Authorization: Bearer $USER_TOKEN" \
        --header "Accept: application/json" \
        --form "toPersonEmail=$webex_user_email" \
        --form "markdown=**Release ${{ github.ref }} for  for ${{ matrix.os }}-${{ matrix.arch }} has been created successfully and deployment packages uploaded to ${{ env.html_url }}**" \
        https://webexapis.com/v1/messages; \
      continue-on-error: true
      if: ${{ success() }}

    - name: send webex bot notification with fail result
      run: | 
        curl --request POST --header "Authorization: Bearer $USER_TOKEN" \
        --header "Accept: application/json" \
        --form "toPersonEmail=$webex_user_email" \
        --form "markdown=**Release ${{ github.ref }} failed to building release package for ${{ matrix.os }}-${{ matrix.arch }}**" \
        https://webexapis.com/v1/messages; \
      continue-on-error: true
      if: ${{ failure() }}